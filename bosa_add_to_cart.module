<?php
/**
 * bosa_add_to_cart module
 *
 * @author Yani Xu <yx@bellcom.dk>
 * @version $0.1
 * @copyright 2014 bellcom open source aps.
 **/
include('bosa_add_to_cart.seats.inc');

/*
 * Implements hook_block_info.
 */
function bosa_add_to_cart_block_info() {
  $blocks['bosa_add_to_cart'] = array(
    'info' => t('bosa add to cart form block'),
  );
  return $blocks;
}

/*
 * Implements hook_block_view.
 */
function bosa_add_to_cart_block_view($delta = '') {
  switch ($delta) {
    case 'bosa_add_to_cart':
      if (arg(0) == 'node') {
        $nid = arg(1);
        if ($nid && is_numeric($nid)) {
          $node = node_load($nid);
        }
      }
      if($products = field_get_items('node',$node,'field_reference')) {
        // Get bosa_add_to_cart_form to the block.
        $block['content'] = drupal_get_form('bosa_add_to_cart_form');
      }
      break;
  }
  return $block;
}
/**
 * bosa_add_to_cart_form
 */
function bosa_add_to_cart_form($form, &$form_state) {
  drupal_add_js(drupal_get_path('module', 'bosa_add_to_cart') . '/bosa_add_to_cart.js');
  drupal_add_css(drupal_get_path('module', 'bosa_add_to_cart') . '/bosa_add_to_cart.css');
  $form_elements = array();
  if (arg(0) == 'node') {
    $nid = arg(1);
    if ($nid && is_numeric($nid)) {
      $node = node_load($nid);
      // Use the nid to builde products add to cart form.
      $form_elements = bosa_add_to_cart_products_builder($node);
    }
  }

  $total = 0;
  foreach ($form_elements as $pid => $all_elements) {
    foreach($all_elements as $key =>$elements) {
      if($elements['status']){
        // Get the total product lines.
        $total += 1;
        $wdate = $elements['wdate'];
        $title = $elements['date'];
        //$total += count($all_elements);
      }
    }
    if($all_elements[0]['price_2_amount']) {
      $text = '<div class="adult">Voksen:</div><div class="child">Barn:</div>';
    }
    else {
      $text = '<div class="price">Pris:</div>';
    }
    if($wdate ) {
      $text2 = 'Product:';
    }
    else {
      $text2 = 'Dato og tidspunkt:';
    }
  }
  if(count($form_elements) > 0) {
    $form['bosa_add_to_cart'] = array(
      '#type' => 'fieldset',
      '#prefix' => '<div style="width:98%;overflow:hidden;">
                    <div class="bosa-product-reference" style= "border-bottom: 1px solid #e3e3e3; height: 20px;margin-bottom:5px; font-weight: bold;">
                    <div class="product-checkbox"></div>
                    <div class="dato">'. $text2.'</div>
                    <div class="place">Pladser:</div>
                    ' . $text . '</div>
                    <div class="bosa-product-reference">',
      '#suffix' => '</div></div>',
      '#tree' => true,
    );
    $count = 0;
    // Foreach product as a array.
    $price = '';
    $price_amount = 0;
    $price_2 = NULL;
    $price_2_amount = 0;
    foreach($form_elements as $pid => $all_elements) {
      // Foreach product that contains multi date.
      foreach ($all_elements as $key => $elements) {
        $prod_id = $elements['prod_id'];
        $date = $elements['date'];
        $stock = $elements['stock'];
        $price_amount = $elements['price_amount'];
        $price = $elements['price'];
        $price_2 = $elements['price_2'];
        $price_2_amount = $elements['price_2_amount'];
        $prefix_class = 'bosa-product-reference_row bosa_part_0';
        $disabled = FALSE;

        if($stock == 0 && is_numeric($stock)) {
          $disabled = TRUE;
        }
        if($stock == "Alle" && !is_numeric($stock)) {
          $stock = "-";
          $disabled = FALSE;
        }
        else {
          $stock .= " stk";
        }
        if (!$elements['status']) {
          $disabled = TRUE;
          continue;
        }
        // Display only the first 6 products. bosa-product-parts class with display:none.
        if($count >= 6) {
          // Divide products into several parts and give the part CSS class
          $part = floor($count/6);
          $prefix_class = 'bosa-product-reference_row bosa-product-parts bosa_part_' . $part;
        }
        $form['bosa_add_to_cart'][$prod_id][$key][1] = array(
          '#type' => 'fieldset',
          '#prefix' => '<div class="' . $prefix_class .'">',
          '#suffix' => '</div>',
        );
        $form['bosa_add_to_cart'][$prod_id][$key][1]['selected'] = array(
          '#prefix' => '<div class= "product-checkbox">',
          '#type' => 'checkbox',
          '#suffix' => "</div>",
          "#disabled" => $disabled,
        );
        if($elements['wdate']) {
          $str = $elements['label'];
        }
        else {
          $weekday = explode(',',$date);
          $str = t($weekday[0]) . ", " . $weekday[1];
        }
        $form['bosa_add_to_cart'][$prod_id][$key][1]['bosa_add_to_cart_date_'.$prod_id] = array(
          '#prefix' => '<div class= "dato">',
          '#type' => 'item',
          '#markup' => $str,
          '#suffix' => "</div>",
        );

        $form['bosa_add_to_cart'][$prod_id][$key][1]['bosa_add_to_cart_stock_'.$prod_id] = array(
          '#prefix' => '<div class= "place">',
          '#type' => 'item',
          '#markup' => $stock,
          '#suffix' => "</div>",
        );
        $form['bosa_add_to_cart'][$prod_id][$key][1]['bosa_add_to_cart_price_'.$prod_id] = array(
          '#prefix' => '<div class= "adult">',
          '#type' => 'item',
          '#markup' => $price,
          '#suffix' => "</div>",
        );
        if ($price_2_amount) {
        $form['bosa_add_to_cart'][$prod_id][$key][1]['bosa_add_to_cart_price2_'.$prod_id] = array(
          '#prefix' => '<div class= "child">',
          '#type' => 'item',
          '#markup' => $price_2,
          '#suffix' => "</div>",
        );
          $title = t('Adults');
        }
        else $title = t('Quantity');
        $count += 1;
      }
    }
    if ($total > 6) {
      $form['bosa_add_cart_3'] = array(
        '#type' => 'item',
        '#markup' => '<a class="right bosa_view_later" id="' . $nid . '" href="#">'.t('Vis senere'). '</a>',
      );
    }
    if ($total > 6) {
      $form['bosa_add_cart_4'] = array(
        '#type' => 'item',
        '#markup' => '<a class="left bosa_view_earlier" id="' . $nid . '" href="#">'.t('Vis tidligere'). '</a>',
      );
    }
    $form['bosa_add_cart_5'] = array(
        '#type' => 'item',
        '#markup' => '<span class="left"><b>' . t('No.:') . '</b></span><span class="right"><b>'.t('Total'). '</b></span>',
    );
    $form['bosa_add_to_cart_2'] = array(
      '#type' => 'fieldset',
      '#prefix' => '<div class= "bosa_cart_amount_all">',
      '#suffix' => '</div>',
    );

    $form['bosa_add_to_cart_2']['bosa_adults_amount'] = array(
      '#type' => 'textfield',
      '#prefix' => '<div class= "bosa_cart_amount">',
      '#size' => '4',
      '#title' => $title,
      '#attributes' => array('data-price' => $price_amount),
      '#default_value' => "-",
      '#suffix' => '<span class = "text_price">' . $price .'</span></div>'
    );
    if ($price_2_amount) {
      $form['bosa_add_to_cart_2']['bosa_children_amount'] = array(
        '#type' => 'textfield',
        '#prefix' => '<div class= "bosa_cart_amount">',
        '#size' => '4',
        '#attributes' => array('data-price' =>$price_2_amount),
        '#title' => t('Children'),
        '#default_value' => "-",
        '#suffix' => '<span class = "text_price">' . $price_2 . '</span></div>'
     );
    }
    $current_currency = commerce_multicurrency_get_user_currency_code();
    $cur=commerce_currency_load($current_currency);
    $sym=$cur['symbol'];
    $form['bosa_add_to_cart_total']['total_price'] = array(
      '#type' => 'item',
      '#prefix' => '<div style = "position:relative; min-height: 50px;"><h2 style="padding: 10px 0; font-size:22px;">'.t('Total :') . '</h2><span class="text_price">',
      '#size' => '4',
      '#markup' =>  "0.00",
      '#suffix' => ' ' .$sym.'</span></div>'
    );
    $form['submit'] = array(
      '#type' => 'submit',
      '#attributes' => array(
        'class' => array('right'),),
      '#value' => t('Submit'),
    );
    return $form;
  }
}
/*
 * function that builder form_elements in bosa_add_to_cart_form
 */
function bosa_add_to_cart_products_builder($node) {
  if (!is_object($node))
    return;

  $form_elements = array();
  if($products = field_get_items('node',$node,'field_reference')) {
    foreach ($products as $prod) {

      // Prepare info like productID, price, second price
      $prod_id = $prod['product_id'];
      $product = commerce_product_load($prod_id);
      $wrapper = entity_metadata_wrapper('commerce_product', $product);
      $price_1 = commerce_product_calculate_sell_price($product);
      $price = commerce_currency_format($price_1['amount'], $price_1['currency_code'], $product);
      if (isset($product->field_2nd_price['und'])) {
        $second_price = $wrapper->field_2nd_price->amount->value();
        $current_currency = commerce_multicurrency_get_user_currency_code();
        $second_price = commerce_currency_convert($second_price, "DKK", $current_currency);
        $converted_price = commerce_currency_format($second_price, $current_currency, $product);
      }
      else {
        $second_price = 0;
        $converted_price = NULL;
      }
      // Product type "produkt_uden_lager_dato"
      if (isset($wrapper->field_offer_dato)) {
        $date = $wrapper->field_offer_dato->value();
      }
      else {
        $date = "";
      }

      // The new "BOSA product" type.
      if(isset($product->field_product_date_and_stock)) {
        $info = field_get_items('commerce_product', $product, 'field_product_date_and_stock');
        $last_min = field_get_items('commerce_product', $product, 'field_product_last_mins');

        foreach ($info as $key => $value) {
          $time_tmp = strtotime($value['product_date']) - $last_min[0]['value'] * 60 * 60;
          // If the time is later than the last date for product selling.
          if (time() > $time_tmp && !$value['product_wdate']) {
            continue;
          }
          $date_2 = strtotime($value['product_date']);
          $stock = bosa_reserved_seats_available($prod_id,$key);
          $date_2 = date('D, d/m/Y - H:i', $date_2);
          $form_elements = bosa_add_to_cart_make_more_products($prod_id,$date_2,$stock,$price,$price_1['amount'],
                                                               $converted_price,$second_price,$value['product_status'],$value['product_wdate'],$form_elements);
        }
        continue;
      }
      // product types "produkt_uden_lager_dato" and "produkt_uden_lager"
      $stock = bosa_reserved_seats_available($prod_id);
      if ($date < time() && $date != "") {
        continue;
      }
      if ($date != "") {
        $date = date('D, d/m/Y - H:i', $date);
        $wdate = 0;
      }
      // product types "produkt_uden_lager_dato"
      else {
        $date = $product->title;
        $wdate = 1;
      }

      $form_elements[$prod_id][] = array(
        'prod_id' => $prod_id,
        'date' => $date,
        'stock' => $stock,
        'price' => $price,
        'price_amount' => $price_1['amount'],
        'price_2' => $converted_price,
        'price_2_amount' => $second_price,
        'label' => $product->title,
        'status' => $product->status,
        'wdate' => $wdate,
      );
    }
  }
  return $form_elements;
}

function bosa_add_to_cart_make_more_products($prod_id,$date,$stock,$price,
                                             $price_amount,$price_2 = null,$second_price = 0,$status = NULL,$wdate = NULL, $form_elements) {
  $product = commerce_product_load($prod_id);
  $form_elements[$prod_id][] = array(
   'prod_id' => $prod_id,
   'date' => $date,
   'stock' => $stock,
   'status' => $status,
   'price' => $price,
   'price_amount' => $price_amount,
   'price_2' => isset($price_2) ? $price_2 : 0,
   'price_2_amount' => $second_price,
   'wdate' => $wdate,
   'label' => $product->title,
  );

  return $form_elements;
}

function bosa_add_to_cart_form_validate($form, &$form_state){
  $prod_ids = array();
  $adults = $form_state['values']['bosa_adults_amount'];
  $children = isset($form_state['values']['bosa_children_amount']) ? $form_state['values']['bosa_children_amount'] : "-";
  if (($adults == "-" || $adults == "") && $children == "-") {
    form_set_error('error', t('You have not input number(s)'));
  }
  foreach($form_state['values']['bosa_add_to_cart'] as $prod_id => $prods) {
    foreach ($prods as $key => $prod) {
      $select = $prod[1]['selected'];
      if($select) {
        $product = commerce_product_load($prod_id);
        $seats = bosa_reserved_seats_available($prod_id, $key);
        if($seats <= 0 && $seats != "Alle") {
          form_set_error('error', t('Der er ingen pladser tilbage'));
        }
        if ((int)($adults + $children) > $seats && $seats >= 0 && $seats != "Alle") {
          form_set_error('error',t('The maximum quantity of '. $product->title . " that can be purchased is ". $seats));
        }
        $prod_ids[] = $key;
      }
    }
  }
  if(count($prod_ids) == 0) {
    form_set_error('error',t('You have not selected a product.'));
  }
}

function bosa_add_to_cart_form_submit($form, &$form_state) {
  global $user;
  $prod_ids = array();
  $adults = $form_state['values']['bosa_adults_amount'];
  $children = isset($form_state['values']['bosa_children_amount']) ? $form_state['values']['bosa_children_amount'] : "-";
  if($adults == "-" && $children != "-") {
    $adults = 0;
  }
  elseif($adults != "-" && $children == "-") {
    $children = 0;
  }

  foreach($form_state['values']['bosa_add_to_cart'] as $prod_id => $prods) {
    foreach ($prods as $key => $prod) {
      $select = $prod[1]['selected'];
      $product = commerce_product_load($prod_id);

      $wrapper = entity_metadata_wrapper('commerce_product', $product);
      if (isset($wrapper->field_offer_dato)) {
        $date = $wrapper->field_offer_dato->value();
        $selected_date = date('d/m/Y - H:i',$date);
      }
      elseif ($info = field_get_items('commerce_product', $product, 'field_product_date_and_stock')) {
        $prod_delta = $key;
        $selected_date = date('d/m/Y - H:i',strtotime($info[$key]['product_date']));
      }
      else {
        $selected_date = "";
        $prod_delta = 0;

      }
      if ($select && $adults) {

        $line_item = commerce_product_line_item_new($product,$adults,0);
        $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
        $line_item_wrapper->field_bosa_selected_date = $selected_date;
        $line_item_wrapper->field_bosa_product_delta = $prod_delta;
        commerce_line_item_save($line_item);
        commerce_cart_product_add($user->uid, $line_item, 0);
      }
      if ($select && $children) {
        _bosa_add_to_cart_price_for_children($product,$children,$selected_date,$prod_delta);
      }
    }
  }
}
/**
 * Alter price for children, see bosa_lineitem.module
 * 
 * @see bosa_lineitem_add_2nd_price_to_cart_submit()
 * @see also bosa_lineitem_commerce_product_calculate_sell_price_line_item_alter()
 * @see also bosa_lineitem_commerce_cart_line_item_refresh()
 * https://github.com/bellcom/bosa/blob/master/bosa_lineitem/bosa_lineitem.module
 */
function _bosa_add_to_cart_price_for_children($product,$children,$selected_date = NULL, $prod_delta){
  global $user;
  $line_item = commerce_product_line_item_new($product,$children,0);

  $current_currency = commerce_multicurrency_get_user_currency_code();
  $wrapper = entity_metadata_wrapper('commerce_product', $product);

  $price = $wrapper->field_2nd_price->amount->value();
  $converted_price = commerce_currency_convert($price, "DKK", $current_currency);

  // loading the lineitem into an entity wrapper
  $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
  $line_item_wrapper->commerce_unit_price->amount = $converted_price;

  // updating the base price
  $line_item_wrapper->commerce_unit_price->data = array(
    'components' => array(
      0 => array(
        'name' => 'base_price',
        'price' => array(
          'amount' => $converted_price,
          'currency_code' => $current_currency
        ),
      ),
    ),
  );
  // we want to be able to see that this product has been sold with the other price
  // this is used later on when we set the price again
  $line_item_wrapper->field_line_item_comment = t('Anden pris');
  $line_item_wrapper->field_bosa_selected_date = $selected_date;
   $line_item_wrapper->field_bosa_product_delta = $prod_delta;
  commerce_line_item_save($line_item);
  commerce_cart_product_add($user->uid, $line_item, 0);
}

/**
 * Implementation of hook_form_alter().
 */
function bosa_add_to_cart_form_alter(&$form, &$form_state,$form_id) {
  if ($form_id == 'commerce_checkout_form_checkout') {
    // Add validate function to the checkout form
    $form['buttons']['continue']['#validate'][] = 'bosa_add_to_cart_cart_form_default_validate';
  }
  if ($form_id == 'commerce_checkout_form_review') {
    // Add validate function to the review form
    // /@todo: would be good to prompt the user with some contextual info
    // as he was about to pay
    $form['buttons']['continue']['#validate'][] = 'bosa_add_to_cart_cart_form_default_validate';
  }

}
/**
 * Implements hook_commerce_checkout_pane_info().
 * check product seats.
 * Should be placed on the first stage of checkout.
 * if there is an error then redirects
 * to the cart.
 */
function bosa_add_to_cart_commerce_checkout_pane_info() {
  $checkout_panes = array();
  $checkout_panes['seats_validation_checkout_pane'] = array(
    'title' => t('check if all items are in stock at checkout'),
    'base' => 'bosa_add_to_cart_commerce_checkout_pane',
    'page' => 'checkout',
    'fieldset' => FALSE,
  );
  return $checkout_panes;
}

/*
 * The seats checkout pane form: call validation when
 * displaying the form this will alow us to redirect the user
 * before he starts checkout
 */
function bosa_add_to_cart_commerce_checkout_pane_checkout_form($form, &$form_state, $checkout_pane, $order) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $form_state['order']);
  bosa_add_to_cart_cart_form_default_validate($form,$form_state,$order);
}
/**
 * Validation handler for update cart. Check if there are any available seats.
 */
function bosa_add_to_cart_cart_form_default_validate($form, $form_state,$order) {
  $found_errors = FALSE;
  // Check each line item
  foreach ($order->commerce_line_items['und'] as $index => $line) {
    $line_item = commerce_line_item_load($line['line_item_id']);
    $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
    $product_id = $line_item_wrapper->commerce_product->product_id->value();
    $product = commerce_product_load($product_id);
    $delta = $line_item_wrapper->field_bosa_product_delta->value();
    $seats = bosa_reserved_seats_available($product_id,$delta);

    if($cancel_info = bosa_reserved_bosa_product_order_info($product_id,$delta)) {
      $attendee = bosa_reserved_get_quantity_by_orders($cancel_info);
    }
    if ($seats < 0) {
      form_set_error("seats_error", t('The minimum quantity of %title that can be purchased is %max.',
                                      array('%title' => $product->title, '%max' => $attendee)));
      $found_errors = TRUE;
    }
  }
  // if out of stock items send back to the cart form
  if ($found_errors) {
    drupal_set_message(t('Please adjust quantities before continuing to checkout.') );
    $cart_url = url('cart', array('absolute' => TRUE));
    drupal_goto( $cart_url);
  }

}
